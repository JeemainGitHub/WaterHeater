//complete coding 

#include <Arduino.h>
#include "heaterBoard.h"

//constructor
heaterBoard::heaterBoard (uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, uint8_t pin5) {
  this->pinGpio1 = pin1;  //Bttn1
  this->pinGpio2 = pin2;  //Bttn2
  this->pinGpio3 = pin3;  //Bttn3
  this->pinGpio4 = pin4;  //LED 1/3/5
  this->pinGpio5 = pin5;  //LeD 2/4/6
}

//getter methods
bool heaterBoard::readBttn1 () {
  return this->statusBttn1;
}
bool heaterBoard::readBttn2(){
  return this->statusBttn2;
}
bool heaterBoard::readBttn3(){
  return this->statusBttn3;
}

//setter methods
void heaterBoard::writeLed1(bool input){
  this->statusLed1 = input;
}
void heaterBoard::writeLed2(bool input){
  this->statusLed2 = input;
}
void heaterBoard::writeLed3(bool input){
  this->statusLed3 = input;
}
void heaterBoard::writeLed4(bool input){
  this->statusLed4 = input;
}
void heaterBoard::writeLed5(bool input){
  this->statusLed5 = input;
}
void heaterBoard::writeLed6(bool input){
  this->statusLed6 = input;
}

//initialization
void heaterBoard::init(){
  pinMode(pinGpio1, OUTPUT);
  pinMode(pinGpio2, OUTPUT);
  pinMode(pinGpio3, OUTPUT);
  pinMode(pinGpio4, OUTPUT);
  pinMode(pinGpio5, OUTPUT);
  digitalWrite(pinGpio1, false);
  digitalWrite(pinGpio2, false);
  digitalWrite(pinGpio3, false);
  digitalWrite(pinGpio4, false);
  digitalWrite(pinGpio5, false);
  delay(1);
  this->statusBttn1 = false;
  this->statusBttn2 = false;
  this->statusBttn3 = false;
  this->statusBttn1Old = true;
  this->statusBttn2Old = true;
  this->statusBttn3Old = true;
  this->statusLed1 = false;
  this->statusLed2 = false;
  this->statusLed3 = false;
  this->statusLed4 = false;
  this->statusLed5 = false;
  this->statusLed6 = false;
  this->caseFlag = 0;
  this->toggle = 0;
}

//cyclic function call
/*
Sequence:
0. configurate gpio's to "led"
1. write output for led's
2. configurate gpio's to "button"
3. read input for button's
*/
void heaterBoard::cycle(){
  switch ( caseFlag ){
    case 0: //configurate pgio to led-mode
      pinMode(pinGpio1, OUTPUT);
      pinMode(pinGpio2, OUTPUT);
      pinMode(pinGpio3, OUTPUT);
      pinMode(pinGpio4, OUTPUT);
      pinMode(pinGpio5, OUTPUT);
      digitalWrite(pinGpio4, false);
      digitalWrite(pinGpio5, false);
      caseFlag++;
      timeOld = millis();
      break;

    case 1: //write output for led's
      if ( (millis() - timeOld) < 200)
      {
        if ( toggle )
        {
          //output Led1 / Led3 / Led5
          digitalWrite(pinGpio4, true);
          digitalWrite(pinGpio5, false);
          digitalWrite(pinGpio1, !statusLed1);
          digitalWrite(pinGpio2, !statusLed3);
          digitalWrite(pinGpio3, !statusLed5);
          toggle = false;
        }
        else
        {
          //outut Led2 / Led4 / Led6
          digitalWrite(pinGpio4, false);
          digitalWrite(pinGpio5, true);
          digitalWrite(pinGpio1, !statusLed2);
          digitalWrite(pinGpio2, !statusLed4);
          digitalWrite(pinGpio3, !statusLed6);
          toggle = true;
        }
        delay(1);
       }
      else
      {
        caseFlag++;
      }
      break;

    case 2: //configurate gpio to button-mode
      digitalWrite(pinGpio4, false);
      digitalWrite(pinGpio5, false);
      digitalWrite(pinGpio1, false);
      digitalWrite(pinGpio2, false);
      digitalWrite(pinGpio3, false);
      pinMode(pinGpio1, INPUT_PULLUP);
      pinMode(pinGpio2, INPUT_PULLUP);
      pinMode(pinGpio3, INPUT_PULLUP);
      caseFlag++;
      break;

    case 3: //read button status
      statusBttn1       = (statusBttn1Old && !digitalRead(pinGpio1));  // XOR = ^
      statusBttn1Old    = !digitalRead(pinGpio1);
      statusBttn2       = (statusBttn2Old && !digitalRead(pinGpio2));  // XOR = ^
      statusBttn2Old    = !digitalRead(pinGpio2);
      statusBttn3       = (statusBttn3Old && !digitalRead(pinGpio3));  // XOR = ^
      statusBttn3Old    = !digitalRead(pinGpio3);
     
      caseFlag = 0;
      break;

  }
}